generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  accounts      Account[]
  ApiKey        ApiKey[]
  buckets       Bucket[]
}

model Images {
  id        Int      @id @default(autoincrement())
  url       String   @db.VarChar(255)
  filename  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bucketId  Int
  bucket    Bucket   @relation(fields: [bucketId], references: [id], onDelete: Cascade)

  @@index([bucketId], map: "Images_bucketId_fkey")
}

model Bucket {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  images    Images[]

  @@index([userId], map: "Bucket_userId_fkey")
}

model ApiKey {
  id              Int      @id @default(autoincrement())
  accessKeyId     String   @unique @db.VarChar(50)
  secretAccessKey String   @db.VarChar(50)
  userId          Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  User            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "ApiKey_userId_fkey")
}
